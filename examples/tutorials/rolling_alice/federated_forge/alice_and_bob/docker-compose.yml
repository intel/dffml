version: "3"

networks:
  alice_bob_federation_bridge_network:
    external: false
  alice_forgejo_network:
    external: false
  bob_forgejo_network:
    external: false

services:
  alice_forgejo_server:
    image: codeberg.org/forgejo/forgejo:1.19.0-2-rootless
    container_name: alice_forgejo
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    networks:
      - alice_forgejo_network
      - alice_bob_federation_bridge_network
    volumes:
      - ./alice_forgejo:/data
      - ./requests/alice/app.ini:/etc/gitea/app.ini:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "2000:2000"
      - "2022:2022"

  alice-forgejo-init-1:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    tty: true
    environment:
      FORGEJO_SERVICE_ROOT: http://alice_forgejo_server:2000
    command:
      - /bin/bash
      - -x
      - /usr/src/forgejo-init/scripts/forgejo-first-time-init.sh
    networks:
      - alice_forgejo_network
      - alice_bob_federation_bridge_network
    volumes:
      - ./requests/alice:/usr/src/forgejo-init/requests:ro
      - ./requests/scripts:/usr/src/forgejo-init/scripts:ro

  bob_forgejo_server:
    image: codeberg.org/forgejo/forgejo:1.19.0-2-rootless
    container_name: bob_forgejo
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    networks:
      - bob_forgejo_network
    volumes:
      - ./bob_forgejo:/data
      - ./requests/bob/app.ini:/etc/gitea/app.ini:rw
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
      - "3022:2022"

  bob-forgejo-init-1:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    tty: true
    environment:
      FORGEJO_SERVICE_ROOT: http://bob_forgejo_server:3000
    command:
      - /bin/bash
      - -x
      - /usr/src/forgejo-init/scripts/forgejo-first-time-init.sh
    networks:
      - bob_forgejo_network
    volumes:
      - ./requests/bob:/usr/src/forgejo-init/requests:ro
      - ./requests/scripts:/usr/src/forgejo-init/scripts:ro

  alice_forgejo_scitt:
    # image: ghcr.io/scitt-community/scitt-api-emulator:main
    image: ghcr.io/pdxjohnny/scitt-api-emulator:ci_cd_container_image
    restart: always
    networks:
      - alice_forgejo_network
    ports:
      - "2090:8000"

  bob_forgejo_scitt:
    # image: ghcr.io/scitt-community/scitt-api-emulator:main
    image: ghcr.io/pdxjohnny/scitt-api-emulator:ci_cd_container_image
    restart: always
    networks:
      - bob_forgejo_network
    ports:
      - "3090:8000"

  # Upstream: https://github.com/guacsec/guac/blob/main/docker-compose.yml#license=Apache License 2.0
  # nats:
  #   image: "nats:2.9.14"
  #   command: "--config /config/nats/js.conf -m 8222"
  #   ports:
  #     - "4222:4222"
  #     # monitoring port
  #     - "8222:8222"
  #   volumes:
  #     - ./alice_guac/nats:/config/nats
  #   restart: on-failure
  alice_activitypub_starter_kit:
    # image: ghcr.io/jakelazaroff/activitypub-starter-kit:main
    image: ghcr.io/pdxjohnny/activitypub-starter-kit:alternate_port
    networks:
      - alice_forgejo_network
    ports:
      - "2777:8000"
    restart: on-failure

  # Due to the following issues, we have another container to perform the healthcheck
  #
  # TODO(lumjjb): I attempted to do health check for neo4j as well, but
  # the service running via neo4j status is not a good indication of if
  # the service is ready for incoming requests.
  # TODO(lumjjb): no good way right now to do a healtcheck for nats-server since
  # it doesn't have utilities within it to perform the check from the container
  # itself.
  alice-service-health-1:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    tty: true
    command:
      - /bin/bash
      - -c
      - |
        echo "checking-for-services";
        until curl -I http://alice_activitypub_starter_kit:8000 > /dev/null 2>&1; do sleep 5; done;
        echo "activitypub-start-kit-up";
        # Neo4j is turned down for now since we are currently only using the in memory backend
        # until curl -I http://neo4j:7474> /dev/null 2>&1; do sleep 5; done;
        # echo "neo4j-up";
    networks:
      - alice_forgejo_network

  alice-guac-collectsub:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/guacone csub-server"
    networks:
      - alice_forgejo_network
    working_dir: /guac
    restart: on-failure
    ports:
      - "2782:2782"
    depends_on:
      alice-service-health-1:
        condition: service_completed_successfully
    volumes:
      - ./alice_guac/guac:/guac

  alice-guac-graphql:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/guacone gql-server"
    networks:
      - alice_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      alice-service-health-1:
        condition: service_completed_successfully
    ports:
      - "2088:8080"
    volumes:
      - ./alice_guac/guac:/guac

  # GUAC ingestor and oci collector are dependent on the collectsub service to be up
  alice-service-health-2:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    networks:
      - alice_forgejo_network
    tty: true
    command:
      - /bin/bash
      - -c
      - |
        echo "checking-for-services";
        until nc -z guac-collectsub 2782 > /dev/null 2>&1; do sleep 5; done;
        echo "guac collectsub up";
        until curl -I http://guac-graphql:8080/query > /dev/null 2>&1; do sleep 5; done;
        echo "graphql up";
    depends_on:
      alice-service-health-1:
        condition: service_completed_successfully

  alice-guac-ingestor:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/ingest ingest"
    networks:
      - alice_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      alice-service-health-2:
        condition: service_completed_successfully
    volumes:
      - ./alice_guac/guac:/guac


  alice-oci-collector:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/collector image --use-csub"
    networks:
      - alice_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      alice-service-health-2:
        condition: service_completed_successfully
    volumes:
      - ./alice_guac/guac:/guac

  # === BEGIN BOB GUAC ====
  bob_activitypub_starter_kit:
    # image: ghcr.io/jakelazaroff/activitypub-starter-kit:main
    image: ghcr.io/pdxjohnny/activitypub-starter-kit:alternate_port
    networks:
      - bob_forgejo_network
      - alice_bob_federation_bridge_network
    ports:
      - "3777:8000"
    restart: on-failure

  # Due to the following issues, we have another container to perform the healthcheck
  #
  # TODO(lumjjb): I attempted to do health check for neo4j as well, but
  # the service running via neo4j status is not a good indication of if
  # the service is ready for incoming requests.
  # TODO(lumjjb): no good way right now to do a healtcheck for nats-server since
  # it doesn't have utilities within it to perform the check from the container
  # itself.
  bob-service-health-1:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    tty: true
    command:
      - /bin/bash
      - -c
      - |
        echo "checking-for-services";
        until curl -I http://bob_activitypub_starter_kit:8000 > /dev/null 2>&1; do sleep 5; done;
        echo "activitypub-start-kit-up";
        # Neo4j is turned down for now since we are currently only using the in memory backend
        # until curl -I http://neo4j:7474> /dev/null 2>&1; do sleep 5; done;
        # echo "neo4j-up";
    networks:
      - bob_forgejo_network

  bob-guac-collectsub:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/guacone csub-server"
    networks:
      - bob_forgejo_network
    working_dir: /guac
    restart: on-failure
    ports:
      - "3782:2782"
    depends_on:
      bob-service-health-1:
        condition: service_completed_successfully
    volumes:
      - ./bob_guac/guac:/guac

  bob-guac-graphql:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/guacone gql-server"
    networks:
      - bob_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      bob-service-health-1:
        condition: service_completed_successfully
    ports:
      - "3088:8080"
    volumes:
      - ./bob_guac/guac:/guac

  # GUAC ingestor and oci collector are dependent on the collectsub service to be up
  bob-service-health-2:
    image: ghcr.io/pdxjohnny/healthcheck:activitypub
    stdin_open: true
    networks:
      - bob_forgejo_network
    tty: true
    command:
      - /bin/bash
      - -c
      - |
        echo "checking-for-services";
        until nc -z guac-collectsub 2782 > /dev/null 2>&1; do sleep 5; done;
        echo "guac collectsub up";
        until curl -I http://guac-graphql:8080/query > /dev/null 2>&1; do sleep 5; done;
        echo "graphql up";
    depends_on:
      bob-service-health-1:
        condition: service_completed_successfully

  bob-guac-ingestor:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/ingest ingest"
    networks:
      - bob_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      bob-service-health-2:
        condition: service_completed_successfully
    volumes:
      - ./bob_guac/guac:/guac


  bob-oci-collector:
    # image: "local-organic-guac"
    image: ghcr.io/pdxjohnny/guac-cont:activitypub
    command: "/opt/guac/collector image --use-csub"
    networks:
      - bob_forgejo_network
    working_dir: /guac
    restart: on-failure
    depends_on:
      bob-service-health-2:
        condition: service_completed_successfully
    volumes:
      - ./bob_guac/guac:/guac
  # === END BOB GUAC ====
