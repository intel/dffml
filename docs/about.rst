About
=====

This project is for your if:

- You want to apply machine learning by just bringing your data

  - No need to deal with the various specifics of ML libraries

- You want to do machine learning on a new problem that you don't have a dataset
  for, so you need to generate it.

- You want to use directed graph execution to write code that runs concurrently
  with managed locking.

Architecture
------------

This is a high level overview of how DFFML works.

.. TODO Autogenerate image during build

    graph TD

    subgraph DataFlow[Dataset Generation]
      df[Directed Graph Execution]
      generate_features[Generate Feature Data]
      single[Single Record]
      all[Whole DataSet]

      df --> generate_features
      generate_features --> single
      generate_features --> all
    end

    subgraph ml[Machine Learning]
      train[Model Training]
      accuracy[Model Accuracy Assessment]
      predict[Prediction Using Trained Model]
    end

    subgraph sources[Dataset Storage]
      source[Dataset Storage Abstraction]
      JSON
      CSV
      MySQL

      source --> JSON
      source --> CSV
      source --> MySQL
    end

    all --> train
    all --> accuracy
    single --> predict

    generate_features --> source
    predict --> source

.. image:: /images/arch.svg
    :alt: Architecture Diagram

Machine Learning
----------------

Python was chosen because of the machine learning communityâ€™s preference towards
it. In addition to the data flow side of DFFML, there is a machine learning
focused side. It provides a standardized way to defining, training, and using
models. It also allows for wrapping existing models so as to expose them via the
standardized API. Models can then be integrated into data flows as operations.
This enables trivial layering of models to create complex features. See
:ref:`plugin_models` for existing models and usage.

Data Flows - Directed Graph Execution
-------------------------------------

The idea behind this project is to provide a way to link together various new
or existing pieces of code and run them via an orchestration engine that
forwards the data between them all. Similar a microservice architecture but with
the orchestration being preformed according to a directed graph. This offers
greater flexibility in that interaction between services can easily be modified
without changing code, only the graph (known as the dataflow).

This is an example of the dataflow for a meta static analysis tool for Python,
``shouldi``. We take the package name (package) and feed it through operations,
which are just functions (but could be anything, some SaaS web API endpoint for
instance). All the data generated by running these operations is query-able,
allowing us to structure the output in whatever way is most fitting for our
application.

.. image:: /images/shouldi-dataflow.svg
    :alt: DataFlow for shouldi tool

Consistent API
--------------

DFFML decouples the interface through which the flow is accessed from the flow
itself. For instance, data flows can be run via the library, HTTP API, CLI, or
any communication channel (next targets are Slack and IRC). Data flows are also
asynchronous in nature, allowing them to be used to build any event driven
application (Chat, IoT data, etc.). The way in which operations are defined and
executed by the orchestrator will let us take existing API endpoints and code in
other languages and combine them into one cohesive workflow. The architecture
itself is programming language agnostic, the first implementation has been
written in Python.

Plugins
-------

We take a community driven approach to content. Architecture is plugin based,
which means anyone can swap out any piece by writing their own plugin and
publishing it to the Python Package Index. This means that developers can
publish operations and machine learning models that work out of the box with
everything else maintained as a part of the core repository and with other
developers models and operations. :doc:`tutorials/index` show how to create your
own plugins.

Team
----

We have an awesome team working on the project. We hold weekly meetings
and have a mailing list and chat! If you want to get involved, ask questions, or
get help getting started, see :doc:`community`.

We participated in Google Summer of Code 2019 under the Python Software
Foundation. A big thanks to our students, Yash and Sudharsana!

- `GSoC 2019 Student Contributions <https://github.com/intel/dffml/wiki/GSoC-2019#student-contributions>`_

Users
-----

The following is a list of organizations and projects using DFFML. Please let us
know if you are using DFFML and we'll add you to the list. If you want help
using DFFML, see the :doc:`community` page.

- Intel

  - Security analysis of Open Source Software dependencies.
