NAME: TESTS

ON:
  WORKFLOW_DISPATCH: NULL
  PUSH:
    BRANCHES:
    - MAIN
    PATHS-IGNORE:
    - 'DOCS/ARCH/**'
  PULL_REQUEST:
    PATHS-IGNORE:
    - 'DOCS/ARCH/**'

JOBS:
  BUILD:
    RUNS-ON: UBUNTU-LATEST
    STRATEGY:
      FAIL-FAST: FALSE
      MATRIX:
        PYTHON-VERSION:
        - "3.12"
    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: SET UP PYTHON ${{ MATRIX.PYTHON-VERSION }}
      USES: ACTIONS/SETUP-PYTHON@V2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
    - NAME: GET PIP CACHE
      ID: PIP-CACHE
      RUN: |
        PYTHON -C "FROM PIP._INTERNAL.LOCATIONS IMPORT USER_CACHE_DIR; PRINT('::SET-OUTPUT NAME=DIR::' + USER_CACHE_DIR)"
    - NAME: PIP CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: ${{ STEPS.PIP-CACHE.OUTPUTS.DIR }}
        KEY: ${{ RUNNER.OS }}-PIP-${{ HASHFILES('**/SETUP.CFG') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-PIP-
    - NAME: INSTALL DEV DEPENDENCIES
      RUN: |
        PIP INSTALL -U PIP SETUPTOOLS WHEEL BUILD
        PIP INSTALL -U SBOM4PYTHON
        PIP INSTALL -U HTTPS://GITHUB.COM/SCITT-COMMUNITY/SCITT-API-EMULATOR/ARCHIVE/E89A60584FA717382F279AE24B8A1A93D458BB4D.ZIP
        PIP INSTALL -E .[DEV]
        PYTHON -M PIP FREEZE
    - NAME: BUILD
      RUN: |
        PYTHON -M BUILD .
    - NAME: GENERATE SBOM
      ID: GENERATE-SBOM
      USES: ANTHONYHARRISON/SBOM4PYTHON@5B458354DF89357BF0253E62EA4567B1807120E2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
        MODULE-NAME: DFFML
        OUTPUT-DIRECTORY: SBOM
    - NAME: IN-TOTO ATTESTATION FOR CYCLONEDX SBOM
      ID: IN-TOTO-CYCLONEDX
      ENV:
        MODULE_NAME: DFFML
      RUN: |
        ECHO "ATTESTATION<<GITHUB_OUTPUT_EOF" >> $GITHUB_OUTPUT
        (PYTHON -M JSON.TOOL --SORT-KEYS | TEE -A $GITHUB_OUTPUT) <<EOF
        {
          "_TYPE": "HTTPS://IN-TOTO.IO/STATEMENT/V0.1",
          "SUBJECT": [
            {
              "NAME": "$(CD DIST/ && ECHO *.TAR.GZ)",
              "DIGEST": {"SHA256": "$(CD DIST/ && SHA256SUM $(ECHO *.TAR.GZ) | AWK '{PRINT $1}')"}
            },
            {
              "NAME": "$(CD DIST/ && ECHO *.WHL)",
              "DIGEST": {"SHA256": "$(CD DIST/ && SHA256SUM $(ECHO *.WHL) | AWK '{PRINT $1}')"}
            }
          ],
          "PREDICATETYPE": "HTTPS://CYCLONEDX.ORG/BOM/V1.4",
          "PREDICATE": $(CAT "${MODULE_NAME}-PY${{ MATRIX.PYTHON-VERSION }}.JSON")
        }
        EOF
        ECHO "GITHUB_OUTPUT_EOF" >> $GITHUB_OUTPUT
    - NAME: CHECKOUT PUBLIC-KEYS BRANCH
      USES: ACTIONS/CHECKOUT@V4
      WITH:
        REF: PUBLIC-KEYS
        PATH: PUBLIC-KEYS
    - NAME: GENERATE KEYPAIR TO SIGN SCITT STATEMENT
      ID: SCITT-GEN-KEYPAIR
      RUN: |
        SSH-KEYGEN -Q -F SSH-PRIVATE -T ECDSA -B 384 -N '' -C "$(HEAD -N 100 /DEV/URANDOM | SHA384SUM | AWK '{PRINT $1}')" -I "$(DATE -ISECONDS)" <<<Y
        CAT SSH-PRIVATE | PYTHON -C 'IMPORT SYS; FROM CRYPTOGRAPHY.HAZMAT.PRIMITIVES IMPORT SERIALIZATION; PRINT(SERIALIZATION.LOAD_SSH_PRIVATE_KEY(SYS.STDIN.BUFFER.READ(), PASSWORD=NONE).PRIVATE_BYTES(ENCODING=SERIALIZATION.ENCODING.PEM, FORMAT=SERIALIZATION.PRIVATEFORMAT.PKCS8, ENCRYPTION_ALGORITHM=SERIALIZATION.NOENCRYPTION()).DECODE().RSTRIP())' > PRIVATE-KEY.PEM
        # CAT SSH-PRIVATE.PUB | TEE -A PUBLIC-KEYS/X509
    - NAME: SSH KEY AS X509
      SHELL: PYTHON -U {0}
      RUN: |
        FROM CRYPTOGRAPHY IMPORT X509
        FROM CRYPTOGRAPHY.X509.OID IMPORT NAMEOID
        FROM CRYPTOGRAPHY.HAZMAT.PRIMITIVES IMPORT HASHES
        FROM CRYPTOGRAPHY.HAZMAT.BACKENDS IMPORT DEFAULT_BACKEND
        FROM CRYPTOGRAPHY.HAZMAT.PRIMITIVES.ASYMMETRIC IMPORT RSA
        FROM CRYPTOGRAPHY.HAZMAT.PRIMITIVES.SERIALIZATION IMPORT ENCODING, PUBLICFORMAT
        FROM JWCRYPTO IMPORT JWK, JWS
        IMPORT DATETIME
        IMPORT PATHLIB

        KEY = JWK.JWK.FROM_PEM(PATHLIB.PATH("PRIVATE-KEY.PEM").READ_BYTES())
        RSA_PUBLIC_KEY = JWK.JWK.FROM_JSON(KEY.EXPORT_PUBLIC())

        # CONVERT THE JWK TO A PUBLIC KEY
        PUBLIC_KEY = RSA_PUBLIC_KEY.GET_OP_KEY('VERIFY')

        # CREATE A BUILDER FOR THE X.509 CERTIFICATE
        SUBJECT = ISSUER = X509.NAME([
            X509.NAMEATTRIBUTE(NAMEOID.COUNTRY_NAME, "US"),
            X509.NAMEATTRIBUTE(NAMEOID.STATE_OR_PROVINCE_NAME, "OREGON"),
            X509.NAMEATTRIBUTE(NAMEOID.LOCALITY_NAME, "PORTLAND"),
            X509.NAMEATTRIBUTE(NAMEOID.ORGANIZATION_NAME, "SCITT EMULATOR"),
            X509.NAMEATTRIBUTE(NAMEOID.COMMON_NAME, "EXAMPLE.COM"),
        ])

        CERT_BUILDER = X509.CERTIFICATEBUILDER(
            SUBJECT_NAME=SUBJECT,
            ISSUER_NAME=ISSUER,
            PUBLIC_KEY=PUBLIC_KEY,
            SERIAL_NUMBER=X509.RANDOM_SERIAL_NUMBER(),
            NOT_VALID_BEFORE=DATETIME.DATETIME.UTCNOW(),
            NOT_VALID_AFTER=DATETIME.DATETIME.UTCNOW() + DATETIME.TIMEDELTA(DAYS=1),  # CERTIFICATE VALID FOR 1 DAY
            EXTENSIONS=[]
        )

        # SELF-SIGN THE CERTIFICATE WITH THE PRIVATE KEY
        PRIVATE_KEY_OP = KEY.GET_OP_KEY('SIGN')
        CERT = CERT_BUILDER.SIGN(PRIVATE_KEY=PRIVATE_KEY_OP, ALGORITHM=HASHES.SHA256(), BACKEND=DEFAULT_BACKEND())

        # SERIALIZE THE CERTIFICATE
        CERT_PEM = CERT.PUBLIC_BYTES(ENCODING=ENCODING.PEM)

        # DISPLAY OR SAVE THE PEM ENCODED CERTIFICATE
        CONTENTS = B""
        TRY:
            PATHLIB.PATH("PUBLIC-KEYS", "X509").READ_BYTES()
        EXCEPT:
            PASS
        PATHLIB.PATH("PUBLIC-KEYS", "X509").WRITE_BYTES(CONTENTS + B"\N" + CERT_PEM)
    - NAME: REMOVE SSH PRIVATE
      RUN: |
        RM -V SSH-PRIVATE
    - NAME: PUSH NEW PUBLIC KEY
      ENV:
        GH_TOKEN: ${{ GITHUB.TOKEN }}
      RUN: |
        SET -XE
        CD PUBLIC-KEYS
        GH AUTH SETUP-GIT
        GIT CONFIG --GLOBAL --ADD SAFE.DIRECTORY "${PWD}"
        GIT CONFIG --GLOBAL USER.EMAIL "ACTIONS@GITHUB.COM"
        GIT CONFIG --GLOBAL USER.NAME "GITHUB ACTIONS"
        GIT ADD -A
        # IF NO DELTA CLEAN EXIT
        GIT COMMIT -SM "SNAPSHOT" || EXIT 0
        GIT PUSH -UF ORIGIN "HEAD:PUBLIC-KEYS"
        # WAIT FOR PROPAGATION
        # TODO X509 STYLE POLLING?
        SLEEP 10S
    - NAME: SUBMIT SBOM TO SCITT
      ID: SCITT-SUBMIT-SBOM
      USES: SCITT-COMMUNITY/SCITT-API-EMULATOR@F1F5C16630A28511E970B6903FBC4C0DB6C07654
      WITH:
        ISSUER: DID:WEB:RAW.GITHUBUSERCONTENT.COM:INTEL:DFFML:PUBLIC-KEYS:X509
        SUBJECT: PKG:GITHUB/${{ GITHUB.REPOSITORY }}@${{ GITHUB.SHA }}
        PAYLOAD: ${{ STEPS.IN-TOTO-CYCLONEDX.OUTPUTS.ATTESTATION }}
        PRIVATE-KEY-PEM: PRIVATE-KEY.PEM
        SCITT-URL: HTTPS://SCITT.UNSTABLE.CHADIG.COM
    - NAME: CREATE PULL REQUEST
      IF: ${{ STEPS.GENERATE-SBOM.OUTPUTS.CHANGED }}
      USES: PETER-EVANS/CREATE-PULL-REQUEST@V5.0.2
      WITH:
        COMMIT-MESSAGE: "CHORE: UPDATE SBOM FOR PYTHON ${{ MATRIX.PYTHON-VERSION }}"
        TITLE: "CHORE: UPDATE SBOM FOR PYTHON ${{ MATRIX.PYTHON-VERSION }}"
        BRANCH: CHORE-SBOM-PY${{ MATRIX.PYTHON-VERSION }}
        DELETE-BRANCH: TRUE
        AUTHOR: GITHUB ACTIONS <ACTIONS@GITHUB.COM>
        ADD-PATHS: SBOM
    - USES: OPENVEX/GENERATE-VEX@159B7EE4845FB48F1991395CE8501D6263407360
      NAME: RUN VEXCTL
      ID: VEXCTL
      WITH:
        PRODUCT: PKG:GITHUB/${{ GITHUB.REPOSITORY }}@${{ GITHUB.SHA }}
    - NAME: SUBMIT OPENVEX TO SCITT
      ID: SCITT-SUBMIT-OPENVEX
      USES: SCITT-COMMUNITY/SCITT-API-EMULATOR@F1F5C16630A28511E970B6903FBC4C0DB6C07654
      WITH:
        ISSUER: DID:WEB:RAW.GITHUBUSERCONTENT.COM:INTEL:DFFML:PUBLIC-KEYS:X509
        SUBJECT: PKG:GITHUB/${{ GITHUB.REPOSITORY }}@${{ GITHUB.SHA }}
        PAYLOAD: ${{ STEPS.VEXCTL.OUTPUTS.OPENVEX }}
        PRIVATE-KEY-PEM: PRIVATE-KEY.PEM
        SCITT-URL: HTTPS://SCITT.UNSTABLE.CHADIG.COM
    - NAME: REMOVE PRIVATE KEY USED IN KEYPAIR TO SIGN SCITT STATEMENT
      RUN: |
        RM -V PRIVATE-KEY.PEM

  LINT:
    RUNS-ON: UBUNTU-LATEST
    STRATEGY:
      FAIL-FAST: FALSE
      MAX-PARALLEL: 40
      MATRIX:
        CHECK: [CHANGELOG, WHITESPACE, COMMIT, LINES]
        PYTHON-VERSION: [3.7]
        NODE-VERSION: [12.X]

    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: CHECKOUT FULL UPSTREAM REPO
      RUN: |
        GIT REMOTE SET-URL ORIGIN HTTPS://GITHUB.COM/INTEL/DFFML
        GIT FETCH --PRUNE --UNSHALLOW
        GIT FETCH --DEPTH=1 ORIGIN +REFS/TAGS/*:REFS/TAGS/*
        GIT CONFIG --GLOBAL USER.EMAIL "DFFML@INTEL.COM"
        GIT CONFIG --GLOBAL USER.NAME "DFFML CI/CD"
    - NAME: SET UP PYTHON ${{ MATRIX.PYTHON-VERSION }}
      USES: ACTIONS/SETUP-PYTHON@V2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
    - NAME: USE NODE.JS ${{ MATRIX.NODE-VERSION }}
      USES: ACTIONS/SETUP-NODE@V1
      WITH:
        NODE-VERSION: ${{ MATRIX.NODE-VERSION }}
    - NAME: GET PIP CACHE
      ID: PIP-CACHE
      RUN: |
        PYTHON -C "FROM PIP._INTERNAL.LOCATIONS IMPORT USER_CACHE_DIR; PRINT('::SET-OUTPUT NAME=DIR::' + USER_CACHE_DIR)"
    - NAME: PIP CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: ${{ STEPS.PIP-CACHE.OUTPUTS.DIR }}
        KEY: ${{ RUNNER.OS }}-PIP-${{ HASHFILES('**/SETUP.PY') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-PIP-
    - NAME: INSTALL DEPENDENCIES
      RUN: |
        SET -X
        ./.CI/DEPS.SH ${{ MATRIX.CHECK }}
    - NAME: RUN CHECK
      RUN: |
        EXPORT GITHUB_TOKEN=${{ SECRETS.GITHUB_TOKEN }}
        SSH_DFFML_GH_PAGES=${{ SECRETS.SSH_DFFML_GH_PAGES }} ./.CI/RUN.SH ${{ MATRIX.CHECK }}

  CONTAINER:
    RUNS-ON: UBUNTU-LATEST

    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: INSTALL DEPENDENCIES
      RUN: |
        SET -X
        CURL -FSSL HTTPS://DOWNLOAD.DOCKER.COM/LINUX/UBUNTU/GPG | SUDO APT-KEY ADD -
        SUDO ADD-APT-REPOSITORY "DEB [ARCH=AMD64] HTTPS://DOWNLOAD.DOCKER.COM/LINUX/UBUNTU $(LSB_RELEASE -CS) STABLE"
        SUDO APT-GET UPDATE && SUDO APT-GET INSTALL -Y DOCKER-CE DOCKER-CE-CLI CONTAINERD.IO
    - NAME: RUN CHECK
      RUN: |
        ./.CI/RUN.SH CONTAINER

  TEST:
    RUNS-ON: UBUNTU-LATEST
    STRATEGY:
      FAIL-FAST: FALSE
      MAX-PARALLEL: 100
      MATRIX:
        PLUGIN:
        - MODEL/DAAL4PY
        - MODEL/TENSORFLOW
        - MODEL/SCRATCH
        - MODEL/SCIKIT
        - MODEL/VOWPALWABBIT
        - MODEL/AUTOSKLEARN
        - MODEL/XGBOOST
        - OPERATIONS/BINSEC
        - OPERATIONS/DATA
        - OPERATIONS/DEPLOY
        - OPERATIONS/IMAGE
        - OPERATIONS/NLP
        - SOURCE/MYSQL
        - FEATURE/GIT
        - FEATURE/AUTH
        - SERVICE/HTTP
        - CONFIGLOADER/YAML
        - CONFIGLOADER/IMAGE
        - SOURCE/MONGODB
        - ENTITIES/ALICE
        PYTHON-VERSION:
        - "3.12"

    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: CHECKOUT FULL UPSTREAM REPO
      RUN: |
        GIT REMOTE SET-URL ORIGIN HTTPS://GITHUB.COM/INTEL/DFFML
        GIT FETCH --PRUNE --UNSHALLOW
        GIT FETCH --DEPTH=1 ORIGIN +REFS/TAGS/*:REFS/TAGS/*
        GIT CONFIG --GLOBAL USER.EMAIL "DFFML@INTEL.COM"
        GIT CONFIG --GLOBAL USER.NAME "DFFML CI/CD"
    - NAME: REMOVE UNUSED SOFTWARE
      RUN: |
        SUDO RM -RF /USR/SHARE/DOTNET /USR/LOCAL/LIB/ANDROID /OPT/GHC
    - NAME: SET UP PYTHON ${{ MATRIX.PYTHON-VERSION }}
      USES: ACTIONS/SETUP-PYTHON@V2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
    - NAME: GET PIP CACHE
      ID: PIP-CACHE
      RUN: |
        PYTHON -C "FROM PIP._INTERNAL.LOCATIONS IMPORT USER_CACHE_DIR; PRINT('::SET-OUTPUT NAME=DIR::' + USER_CACHE_DIR)"
    - NAME: PIP CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: ${{ STEPS.PIP-CACHE.OUTPUTS.DIR }}
        KEY: ${{ RUNNER.OS }}-PIP-${{ HASHFILES('**/SETUP.PY') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-PIP-
    - NAME: SHOULDI TEST BINARY CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: EXAMPLES/SHOULDI/TESTS/DOWNLOADS
        KEY: ${{ HASHFILES('EXAMPLES/SHOULDI/TESTS/BINARIES.PY') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-SHOULDI-TEST-BINARIES-
    - NAME: INSTALL DEPENDENCIES
      RUN: |
        SET -X
        ./.CI/DEPS.SH ${{ MATRIX.PLUGIN }}
    - NAME: TEST
      RUN: |
        SET -X
        EXPORT GITHUB_TOKEN=${{ SECRETS.GITHUB_TOKEN }}
        EXPORT PYTHON=PYTHON${{ MATRIX.PYTHON-VERSION }}
        EXPORT PLUGIN=${{ MATRIX.PLUGIN }}
        EXPORT LOGGING=DEBUG
        EXPORT PATH="${HOME}/.LOCAL/BIN:${PATH}"
        EXPORT PYPI_TOKENS=$(MKTEMP)
        CAT > ${PYPI_TOKENS} <<EOF
        EXAMPLES/SHOULDI=${{ SECRETS.PYPI_SHOULDI }}
        MODEL/DAAL4PY=${{ SECRETS.PYPI_MODEL_DAAL4PY }}
        MODEL/TENSORFLOW=${{ SECRETS.PYPI_MODEL_TENSORFLOW }}
        MODEL/TENSORFLOW_HUB=${{ SECRETS.PYPI_MODEL_TENSORFLOW_HUB }}
        MODEL/SCRATCH=${{ SECRETS.PYPI_MODEL_SCRATCH }}
        MODEL/SCIKIT=${{ SECRETS.PYPI_MODEL_SCIKIT }}
        MODEL/SPACY=${{ SECRETS.PYPI_MODEL_SPACY }}
        MODEL/VOWPALWABBIT=${{ SECRETS.PYPI_MODEL_VOWPALWABBIT }}
        MODEL/AUTOSKLEARN=${{ SECRETS.PYPI_MODEL_AUTOSKLEARN }}
        MODEL/PYTORCH=${{ SECRETS.PYPI_MODEL_PYTORCH }}
        MODEL/XGBOOST=${{ SECRETS.PYPI_MODEL_XGBOOST }}
        SOURCE/MYSQL=${{ SECRETS.PYPI_SOURCE_MYSQL }}
        SOURCE/MONGODB=${{ SECRETS.PYPI_SOURCE_MONGODB }}
        FEATURE/GIT=${{ SECRETS.PYPI_FEATURE_GIT }}
        FEATURE/AUTH=${{ SECRETS.PYPI_FEATURE_AUTH }}
        OPERATIONS/BINSEC=${{ SECRETS.PYPI_OPERATIONS_BINSEC }}
        OPERATIONS/DATA=${{ SECRETS.PYPI_OPERATIONS_DATA }}
        OPERATIONS/DEPLOY=${{ SECRETS.PYPI_OPERATIONS_DEPLOY }}
        OPERATIONS/IMAGE=${{ SECRETS.PYPI_OPERATIONS_IMAGE }}
        OPERATIONS/NLP=${{ SECRETS.PYPI_OPERATIONS_NLP }}
        SERVICE/HTTP=${{ SECRETS.PYPI_SERVICE_HTTP }}
        CONFIGLOADER/YAML=${{ SECRETS.PYPI_CONFIG_YAML }}
        CONFIGLOADER/IMAGE=${{ SECRETS.PYPI_CONFIG_IMAGE }}
        EOF
        EXPORT TWINE_USERNAME=__TOKEN__
        IF [ "X${PLUGIN}" = "X." ]; THEN
          EXPORT TWINE_PASSWORD=${{ SECRETS.PYPI_DFFML }}
        ELSE
          EXPORT TWINE_PASSWORD=$(GREP "${PLUGIN}=" "${PYPI_TOKENS}" | SED 'S/^[^=]*=//G')
        FI
        RM ${PYPI_TOKENS}
        ./.CI/RUN.SH "${PLUGIN}"
        IF [ "X${PLUGIN}" = "X." ]; THEN
          CODECOV_TOKEN=${{ SECRETS.CODECOV_TOKEN }} CODECOV
        FI

  TUTORIALS:
    RUNS-ON: UBUNTU-LATEST
    IF: FALSE
    STRATEGY:
      FAIL-FAST: FALSE
      MAX-PARALLEL: 100
      MATRIX:
        PYTHON-VERSION: [3.7]
        DOCS:
        - DOCS/CLI.RST
        - DOCS/EXAMPLES/DATAFLOWS.RST
        - DOCS/EXAMPLES/INTEGRATION.RST
        - DOCS/EXAMPLES/OR_COVID_DATA_BY_COUNTY.RST
        - DOCS/EXAMPLES/SHOULDI.RST
        - DOCS/EXAMPLES/INNERSOURCE/SWPORTAL.RST
        - DOCS/EXAMPLES/INNERSOURCE/MICROSERVICE.RST
        - DOCS/EXAMPLES/INNERSOURCE/KUBERNETES.RST
        - DOCS/EXAMPLES/ICECREAM_SALES.RST
        - DOCS/EXAMPLES/DATA_CLEANUP/DATA_CLEANUP.RST
        - DOCS/EXAMPLES/DATA_CLEANUP/DATA_CLEANUP_CLASSFICATION.RST
        - DOCS/INSTALLATION.RST
        - DOCS/TROUBLESHOOTING.RST
        - DOCS/TUTORIALS/ACCURACY/MSE.RST
        - DOCS/TUTORIALS/DATAFLOWS/IO.RST
        - DOCS/TUTORIALS/DATAFLOWS/NLP.RST
        - DOCS/TUTORIALS/MODELS/IRIS.RST
        - DOCS/TUTORIALS/MODELS/PACKAGE.RST
        - DOCS/TUTORIALS/MODELS/DOCS.RST
        - DOCS/TUTORIALS/MODELS/SLR.RST
        - DOCS/TUTORIALS/SOURCES/COMPLEX.RST
        - DOCS/TUTORIALS/SOURCES/FILE.RST

    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: CHECKOUT FULL UPSTREAM REPO
      RUN: |
        GIT REMOTE SET-URL ORIGIN HTTPS://GITHUB.COM/INTEL/DFFML
        GIT FETCH --PRUNE --UNSHALLOW
        GIT FETCH --DEPTH=1 ORIGIN +REFS/TAGS/*:REFS/TAGS/*
        GIT CONFIG --GLOBAL USER.EMAIL "DFFML@INTEL.COM"
        GIT CONFIG --GLOBAL USER.NAME "DFFML CI/CD"
    - NAME: SET UP PYTHON ${{ MATRIX.PYTHON-VERSION }}
      USES: ACTIONS/SETUP-PYTHON@V2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
    - NAME: GET PIP CACHE
      ID: PIP-CACHE
      RUN: |
        PYTHON -C "FROM PIP._INTERNAL.LOCATIONS IMPORT USER_CACHE_DIR; PRINT('::SET-OUTPUT NAME=DIR::' + USER_CACHE_DIR)"
    - NAME: PIP CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: ${{ STEPS.PIP-CACHE.OUTPUTS.DIR }}
        KEY: ${{ RUNNER.OS }}-PIP-${{ HASHFILES('**/SETUP.PY') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-PIP-
    - NAME: INSTALL DEPENDENCIES
      RUN: |
        SET -X
        ./.CI/DEPS.SH .
    - NAME: TEST
      RUN: |
        SET -X
        EXPORT GITHUB_TOKEN=${{ SECRETS.GITHUB_TOKEN }}
        EXPORT PYTHON=PYTHON${{ MATRIX.PYTHON-VERSION }}
        EXPORT PLUGIN=${{ MATRIX.PLUGIN }}
        EXPORT LOGGING=DEBUG
        EXPORT PATH="${HOME}/.LOCAL/BIN:${PATH}"
        ./.CI/RUN.SH CONSOLETEST ${{ MATRIX.DOCS }}

  MACOS:
    RUNS-ON: MACOS-LATEST
    IF: FALSE
    STRATEGY:
      FAIL-FAST: FALSE
      MATRIX:
        PYTHON-VERSION: [3.7]
    STEPS:
    - USES: ACTIONS/CHECKOUT@V2
    - NAME: CHECKOUT FULL UPSTREAM REPO
      RUN: |
        GIT REMOTE SET-URL ORIGIN HTTPS://GITHUB.COM/INTEL/DFFML
        GIT FETCH --PRUNE --UNSHALLOW
        GIT CONFIG --GLOBAL USER.EMAIL "DFFML@INTEL.COM"
        GIT CONFIG --GLOBAL USER.NAME "DFFML CI/CD"
    - NAME: SET UP PYTHON ${{ MATRIX.PYTHON-VERSION }}
      USES: ACTIONS/SETUP-PYTHON@V2
      WITH:
        PYTHON-VERSION: ${{ MATRIX.PYTHON-VERSION }}
    - NAME: GET PIP CACHE
      ID: PIP-CACHE
      RUN: |
        PYTHON -C "FROM PIP._INTERNAL.LOCATIONS IMPORT USER_CACHE_DIR; PRINT('::SET-OUTPUT NAME=DIR::' + USER_CACHE_DIR)"
    - NAME: PIP CACHE
      USES: ACTIONS/CACHE@V1
      WITH:
        PATH: ${{ STEPS.PIP-CACHE.OUTPUTS.DIR }}
        KEY: ${{ RUNNER.OS }}-PIP-${{ HASHFILES('**/SETUP.PY') }}
        RESTORE-KEYS: |
          ${{ RUNNER.OS }}-PIP-
    - NAME: SETUP DFFML
      RUN: |
        PIP INSTALL -U PIP SETUPTOOLS WHEEL
        PIP INSTALL -E .[DEV]
        DFFML SERVICE DEV INSTALL -SKIP MODEL/DAAL4PY
        # XGBOOST REQUIRES LIBOMP ON OSX
        BREW INSTALL LIBOMP
    - NAME: TEST
      RUN: |
        PYTHON -M UNITTEST DISCOVER -V
        PYTHON -M PIP FREEZE
